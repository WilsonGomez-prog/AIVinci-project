import React, { useState, useEffect } from 'react';
import { Card, Loader, FormField } from '../components/index'
import { Post } from '../interfaces/index';

interface RenderCardsProps {
  data: Post[],
  title: string
}

const RenderCards: React.FC<RenderCardsProps> = ({ data, title }: RenderCardsProps) => {
  return (
    <>
    { 
      data.length > 0 
      ?
        data.map((post) => (<Card key={post._id} {...post}/>))
      :
        (<h2 className='mt-5 font-bold text-[#6449ff] text-xl uppercase'>{title}</h2>)
    }
    </>
  )
}

const Home = () => {
  const [loading, setLoading] = useState<boolean>(false);
  const [allPosts, setAllPosts] = useState<Post[]>([]);

  const [searchText, setSearchText] = useState<string>("");
  const [searchResults, setSearchResults] = useState<Post[]>([])

  useEffect(() => {
    const fetchPosts = async () => {
      setLoading(true);
      try {
         const response = await fetch(`http://localhost:5000/api/post`, {
          method: "GET",
          headers: {
            'Content-Type': 'application/json'
          }
         });

         if(response.ok) {
          const result = await response.json();

          setAllPosts(result.data.reverse());
         }
      } catch (error) {
        alert(error);
      } finally { 
        setLoading(false);
      }
    }

    fetchPosts();
  }, [])

  const handleSearchChange = (event: React.FormEvent<HTMLInputElement>) => {
    const target = (event.target as HTMLInputElement);

    setSearchText(target.value);

    setTimeout( () => {
      const filteredPosts = allPosts.filter((post) => post.name.toLowerCase().includes(searchText.toLowerCase()) || post.prompt.toLowerCase().includes(searchText.toLowerCase()));
      setSearchResults(filteredPosts);
    } ,500);

  }

  return (
    <section className='max-w-7xl mx-auto' >
      <div>
        <h1 className='font-extrabold text-[#222328] text-[32px]'>The Community Showcase</h1>
        <p className='mt-2 text-[#666e75] text-[16px] max-w[500px]'> Browse  through a collection of imaginative and visually stunning images generated by DALL-E AI</p>
      </div>
      <div className='mt-16'>
        <FormField labelName="Search Posts" type="text" name="text" placeholder="Search posts" value={searchText} handleChange={handleSearchChange} isSurpriseMe={false} handleSurpriseMe={() =>{}} />
      </div>

      <div className='mt-10'>
        {
          loading ? (
            <div className='flex justify-center items-center'>
              <Loader />
            </div>
          ) : (
            <>
              { 
                searchText 
                && 
                <h2 className="font-medium text-[#666e75] text-xl mb-3">Showing results for <span className='text-[#222328]'>{searchText}</span></h2> 
              }
              <div className='grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3'>
                {searchText ? (
                  <RenderCards data={searchResults} title="No search results found "/>
                ) : (                  
                  <RenderCards data={allPosts} title="No posts found "/>
                )}
              </div>
            </>
          )
        }
      </div>
    </section>
  )
}

export default Home